#!/bin/bash

# Fabric Network Experiment Automation Script
# Usage: ./run_fabric_experiment.sh <parameter_name> <parameter_value>
# Example: ./run_fabric_experiment.sh MaxMessageCount 2000

set -e  # Exit on any error

# Debug mode (set to 1 to enable verbose output with set -x)
DEBUG=${DEBUG:-1}

# Enable trace mode if debug is enabled
if [ "$DEBUG" -eq 1 ]; then
    set -x  # Print commands before executing them
fi

# Configuration
SCRIPT_DIR="/root/ruc/experiments"
FABRIC_SAMPLES_DIR="/root/ruc/fabric-samples"
TEST_NETWORK_DIR="${FABRIC_SAMPLES_DIR}/test-network"
CALIPER_DIR="/root/ruc/caliper-benchmarks"
PROMETHEUS_DIR="${TEST_NETWORK_DIR}/prometheus-grafana"
PYTHON_SCRIPT="${SCRIPT_DIR}/modify_max_message_count.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "\n${BLUE}==================== STEP $1 ====================${NC}"
    echo -e "${BLUE}$2${NC}\n"
}

# Function to execute command with proper error handling
execute_command() {
    local cmd="$1"
    local description="$2"
    local working_dir="$3"
    
    if [ -n "$working_dir" ]; then
        print_status "Changing directory to: $working_dir"
        cd "$working_dir" || {
            print_error "Failed to change directory to $working_dir"
            exit 1
        }
    fi
    
    print_status "Executing: $description"
    
    # Execute the command (set -x will show the actual command if DEBUG=1)
    eval "$cmd"
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        print_success "$description completed successfully"
    else
        print_error "$description failed with exit code $exit_code"
        exit $exit_code
    fi
    
    return $exit_code
}

# Function to validate prerequisites
validate_prerequisites() {
    print_step "0" "Validating Prerequisites"
    
    # Check if required directories exist
    local dirs=("$SCRIPT_DIR" "$FABRIC_SAMPLES_DIR" "$TEST_NETWORK_DIR" "$CALIPER_DIR")
    for dir in "${dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            print_error "Required directory does not exist: $dir"
            exit 1
        else
            print_status "Found directory: $dir"
        fi
    done
    
    # Check if Python script exists
    if [ ! -f "$PYTHON_SCRIPT" ]; then
        print_error "Python script not found: $PYTHON_SCRIPT"
        exit 1
    else
        print_status "Found Python script: $PYTHON_SCRIPT"
    fi
    
    print_success "All prerequisites validated"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 <parameter_name> <parameter_value>"
    echo ""
    echo "Supported parameters:"
    echo "  MaxMessageCount    - Maximum number of messages in a batch"
    echo ""
    echo "Examples:"
    echo "  $0 MaxMessageCount 2000"
    echo "  $0 MaxMessageCount 1500"
    echo ""
    echo "Environment variables:"
    echo "  DEBUG=0|1         - Enable/disable command tracing with 'set -x' (default: 1)"
}

# Function to validate parameters
validate_parameters() {
    local param_name="$1"
    local param_value="$2"
    
    # Check if both parameters are provided
    if [ -z "$param_name" ] || [ -z "$param_value" ]; then
        print_error "Both parameter name and value are required"
        show_usage
        exit 1
    fi
    
    # Validate parameter name
    case "$param_name" in
        "MaxMessageCount")
            # Validate that value is a positive integer
            if ! [[ "$param_value" =~ ^[1-9][0-9]*$ ]]; then
                print_error "MaxMessageCount must be a positive integer"
                exit 1
            fi
            ;;
        *)
            print_error "Unsupported parameter: $param_name"
            print_error "Currently supported parameters: MaxMessageCount"
            exit 1
            ;;
    esac
    
    print_success "Parameters validated: $param_name = $param_value"
}

# Main experiment workflow
run_experiment() {
    local param_name="$1"
    local param_value="$2"
    
    print_status "Starting Fabric Network Experiment"
    print_status "Parameter: $param_name = $param_value"
    print_status "Command tracing (set -x): $([ $DEBUG -eq 1 ] && echo 'ENABLED' || echo 'DISABLED')"
    
    if [ "$DEBUG" -eq 1 ]; then
        print_status "Note: Lines starting with '+' show commands being executed"
    fi
    
    # Step 1: Stop the network
    print_step "1" "Stopping Fabric Network"
    execute_command "./network.sh down" "Network shutdown" "$TEST_NETWORK_DIR"
    
    # Step 2: Clean all containers
    print_step "2" "Cleaning Docker Containers"
    # Check if there are containers to remove
    if [ "$(docker ps -aq)" ]; then
        execute_command "docker rm -f \$(docker ps -aq)" "Container cleanup"
    else
        print_status "No containers to remove"
    fi
    
    # Step 3: Modify configuration parameter
    print_step "3" "Modifying Configuration Parameter"
    case "$param_name" in
        "MaxMessageCount")
            execute_command "python3 $PYTHON_SCRIPT $param_value" "Configuration modification" "$SCRIPT_DIR"
            ;;
    esac
    
    # Step 4: Restart the network
    print_step "4" "Starting Fabric Network with BFT"
    execute_command "./network.sh up createChannel -bft" "Network startup" "$TEST_NETWORK_DIR"
    
    # Step 5: Deploy chaincode
    print_step "5" "Deploying Chaincode"
    execute_command "./network.sh deployCC -ccn fabcar -ccp ../../caliper-benchmarks/src/fabric/samples/fabcar/go -ccl go" "Chaincode deployment" "$TEST_NETWORK_DIR"
    
    # Step 6: Start Prometheus
    print_step "6" "Starting Prometheus and Grafana"
    execute_command "docker-compose up -d" "Prometheus startup" "$PROMETHEUS_DIR"
    
    # Wait a moment for services to stabilize
    print_status "Waiting 5 seconds for services to stabilize..."
    sleep 5
    
    # Step 7: Execute benchmark
    print_step "7" "Executing Caliper Benchmark"
    local caliper_cmd="npx caliper launch manager \
        --caliper-workspace ./ \
        --caliper-networkconfig networks/fabric/test-network.yaml \
        --caliper-benchconfig benchmarks/samples/fabric/fabcar/config.yaml \
        --caliper-flow-only-test \
        --caliper-fabric-gateway-enabled"
    
    execute_command "$caliper_cmd" "Benchmark execution" "$CALIPER_DIR"
    
    print_success "Experiment completed successfully!"
    print_status "Results should be available in Caliper output and Grafana dashboard"
}

# Function to handle cleanup on script exit
cleanup_on_exit() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        print_error "Script failed with exit code $exit_code"
        print_warning "You may need to manually clean up the environment"
        print_status "To reset the environment, run:"
        print_status "  cd $TEST_NETWORK_DIR && ./network.sh down"
        print_status "  docker rm -f \$(docker ps -aq)"
    fi
}

# Set up signal handlers
trap cleanup_on_exit EXIT
trap 'print_error "Script interrupted by user"; exit 130' INT TERM

# Main execution
main() {
    # Parse command line arguments
    local param_name="$1"
    local param_value="$2"
    
    # Show usage if no parameters provided
    if [ $# -eq 0 ]; then
        show_usage
        exit 0
    fi
    
    # Validate inputs
    validate_parameters "$param_name" "$param_value"
    
    # Validate prerequisites
    validate_prerequisites
    
    # Run the experiment
    run_experiment "$param_name" "$param_value"
}

# Execute main function with all arguments
main "$@"